<?php
/**
 * Created by PhpStorm.
 * User: Administrator
 * Date: 2017/9/27
 * Time: 21:51
 */
namespace app\api\controller;

use app\api\model\Data;
use app\api\model\DataImg;
use app\common\controller\Base;
use app\common\lib\LibFile;
use app\common\org\Res;
use think\Response;

class DataController extends Base
{

    /**
     * 控制器初始化
     */
    public function initialize()
    {
        parent::initialize(); // TODO: Change the autogenerated stub
        if (!$this->url == "api/Data/getDglist" || !$this->url == "api/Task/taskList") {
            $this->log();
        }
    }

    /**
     * 创建data
     * @param Data $sqldata
     * @return \think\response\Json
     */
    public function create(Data $sqldata)
    {
        $data = $this->request->param();
        return $data;
        $data['user_id'] = $this->uid;
        $validate = new \app\api\validate\Data();
        if ($validate->check($data)) {
            if ($sqldata->save($data)) {
                return Res::Json(200);
            }
        } else {
            return Res::Json(400, $validate->getError());
        }
    }

    /**
     * 编辑
     * @param $id
     * @return \think\response\Json
     */
    public function edit($id)
    {
        $data = $this->request->post();
        $validate = new \app\api\validate\Data();
        if ($validate->scene('edit')->check($data)) {
            $M = Data::get($id);
            $M->bak(0);
            if ($M->save($data)) {
                return Res::Json(200);
            } else {
                return Res::Json(400);
            }
        } else {
            return Res::json(400, $validate->getError());
        }
    }

    public function getOneRow($id)
    {
        $row = Data::get($id);
        if ($row) {
            return json($row->getData());
        }
    }

    /**
     * 没有社保操作
     * @param $id
     * @return \think\response\Json
     */
    public function shebao($id)
    {
        $M = Data::get($id);
        $M->status = Data::NOT_SHEBAO;
        $M->area = null;
        $M->shebao = null;
        $M->shebaoname = null;
        if ($M->save()) {
            return Res::Json(200);
        } else {
            return Res::Json(400);
        }
    }

    /**
     * 退款操作
     * @param $id
     * @return \think\response\Json
     */
    public function refund($id)
    {
        $M = Data::get($id);
        $M->comment = $this->request->param('comment');
        $M->order = -1;//退款
        if ($M->save()) {
            return Res::Json(200);
        } else {
            return Res::Json(400);
        }
    }

    /**
     * 问题打回
     * @param $id
     * @return \think\response\Json
     */
    public function refurn($id)
    {
        $M = Data::get($id);
        $M->comment = $this->request->param('comment');
        $M->Tag = $this->request->param('Tag');
        $M->status = Data::REFURN;
        if ($M->save()) {
            return Res::Json(200);
        } else {
            return Res::Json(400);
        }
    }

    /**
     * 待录人保
     * @param $id
     * @return \think\response\Json
     */
    public function etcinput($id)
    {
        $M = Data::get($id);
        $M->status = Data::ETCINPUT;
        return $M->save() ? Res::Json(200) : Res::Json(400);
    }

    /**
     * 提交人保
     * @param $id
     * @return \think\response\Json
     */
    public function commit($id)
    {
        $M = Data::get($id);
        $M->status = Data::COMMIT;
        $M->speed_time = time();
        $M->service = $this->request->param('service');
        $M->comment = $this->request->param('comment');
        return $M->save() ? Res::Json(200) : Res::Json(400);
    }

    /**
     * 一审
     * @param $id
     * @return \think\response\Json
     */
    public function sign($id)
    {
        $M = Data::get($id);

        //不是未办状态
        if ($M->getData('speed') != -1)
            return Res::Json(400, '当前办理进度信息不符..核实当前进度!!');

        //应届生直接完成
        if ($M->getData('mode') == '03') {
            $M->speed = 3;
            $M->status = Data::GET_DIAOLING;
        } else {
            //一审
            $M->speed = 1;
            $M->status = Data::SIGN;
        }

        if ($M->I_date == null)
            $M->I_date = time();

        return $M->save() ? Res::Json(200) : Res::Json(400);
    }

    /**
     * 预备二审
     * @param $id
     * @return \think\response\Json
     */
    public function prepareSubmit($id)
    {
        $M = Data::get($id);

        //不是一审
        if ($M->getData('speed') != 1)
            return Res::Json(400, '当前办理进度信息不符..核实当前进度!!');

        $M->status = Data::PREPARE_SUBMIT;
        return $M->save() ? Res::Json(200) : Res::Json(400);
    }

    /**
     * 二审
     * @param $id
     * @return \think\response\Json
     */
    public function submit($id)
    {
        $M = Data::get($id);

        //进度不是一审的
        if ($M->getData('speed') != 1)
            return Res::Json(400, '当前办理进度信息不符 ! 客户尚未一审.核实当前进度!!');

        $M->speed = 2;
        $M->status = Data::SUBMIT;

        if ($M->II_date == null) {
            $M->II_date = time();
        }

        return $M->save() ? Res::Json(200) : Res::Json(400);
    }

    /**
     * 已拿调令
     * @param $id
     * @return \think\response\Json
     */
    public function takeDiaol($id)
    {
        $M = Data::get($id);
        //进度不是二审的
        if ($M->getData('speed') != 2)
            return Res::Json(400, '当前办理进度信息不符 ! 客户尚未二审 . 核实当前进度!!');

        if ($M->getData('status') == Data::GET_DIAOLING) {

            return Res::Json(400, '当前办理进度信息不符!!');

        } else {

            $M->status = Data::GET_DIAOLING;
            $M->speed = 3;

        }

        return $M->save() ? Res::Json(200) : Res::Json(400);

    }

    /**
     * 完结
     * @param mixed|string $id
     * @return \think\response\Json
     */
    public function finish($id)
    {
        $M = Data::get($id);

        //进度不是二审的
        if ($M->getData('speed') != 2)
            return Res::Json(400, '当前办理进度信息不符!核实当前进度!!');

        $M->speed = 3;
        $M->status = Data::FINISH;

        return $M->save() ? Res::Json(200) : Res::Json(400);

    }

    /**
     * 进度后撤
     * @param $id
     * @return \think\response\Json
     */
    public function back($id)
    {
        $M = Data::get($id);

        if ($M->getData('speed') == 1) {
            $M->speed = -1;
            $M->status = Data::COMMIT;
            $M->I_data = null;
        } else if ($M->getData('speed') == 2) {
            $M->speed = 1;
            $M->status = Data::SIGN;
            $M->II_data = null;
        } else if ($M->getData('speed') == 3) {
            //应届生
            if ($M->getData('mode') == '03') {
                $M->speed = -1;
                $M->status = Data::COMMIT;
                $M->I_data = null;
            }
            $M->speed = 2;
            $M->status = Data::SUBMIT;
        }

        return $M->save() ? Res::Json(200) : Res::Json(400);
    }

    /**
     * 备注
     * @param $id
     * @return \think\response\Json
     */
    public function comment($id)
    {
        $M = Data::get($id);
        $M->comment = $this->request->param('comment');
        return $M->save() ? Res::Json(200) : Res::Json(400);
    }

    /**
     * 标记
     * @param $id
     * @return \think\response\Json
     */
    public function tag($id)
    {
        $M = Data::get($id);
        $M->Tag = $this->request->param('tag');
        $M->comment = $this->request->param('comment');
        return $M->save() ? Res::Json(200) : Res::Json(400);
    }

    /**
     * 获取数据列表支持搜索
     *  POST     只支持POST
     *  $rule    条件规则               rule  fieids = :name and fiedis2 = :name2;
     *  $fieids  规则绑定 or 数组条件    array [name => :name , name2=>:name2]
     *  $params  分页排序参数           array ['page', 'rows', 'sort', 'order'] post;
     *  $type    列表或搜索             string  sousou OR null
     * @return \think\response\Json  {rows:{},total:xx,type:xx}
     */
    public function getDglist(Data $sqldata)
    {
        //请求说明 $params为排序分页 $rule 是查询规则 $fieids 是绑定参数
        $params = $this->request->only(['page', 'rows', 'sort', 'order'], 'post');
        $rule = $this->request->post('rule');
        $fieids = $this->request->except(['page', 'rows', 'sort', 'order', 'rule', 'type'], 'post');
        $type = $this->request->post('type');
        if ($type == 'sousou') {
            $lists = $sqldata->search($params, $fieids, $this->group_id);
        } else {
            if ($rule == null || $fieids == null) { // 没有条件显示所有
                $rule = "1 = :id";
                $fieids = ['id' => 1];
            }
            $lists = $sqldata->getDgList($params, $rule, $fieids, $this->group_id);
        }
        $lists['type'] = $type;
        return json($lists);
    }

    /**
     * 内勤调入
     * @param $id
     * @return \think\response\Json
     */
    public function NuserCallin($id)
    {
        $M = Data::get($id);
        if ($M->nuser_id != null) {
            return Res::Json(400,
                '该用户已经是【 '
                . $M->nuser_id
                . ' 】负责的客户若要调入请先联系该内勤调出'
            );
        }
        $M->nuser_id = $this->uid;
        return $M->save() ? Res::Json(200, '成功调入!') : Res::Json(400);
    }

    /**
     * SET已约号
     * @param $id
     * @return \think\response\Json
     */
    public function setAppointment($id)
    {
        $M = Data::get($id);
        if ($M->getData('speed') == 0) {
            $M->status = Data::APPOINTMENT_I;//已约号1
        } else if ($M->getData('speed') == 1) {
            $M->status = Data::APPOINTMENT_II;//已约号2
        }
        return $M->save() ? Res::Json(200) : Res::Json(400);
    }

    /**
     * 获取已约号列表EXE调用
     * @param Data $M
     * @return \think\response\Json
     */
    public function getAppointmentList(Data $M)
    {
        return json(
            $M->field('id,card,mode,user_id')
                ->where('status', 'in', '5,6')
                ->where('order', 1)
                ->select()
        );
    }

    /**
     * 获取已二审列表EXE调用用于查询人社进度
     * @param Data $M
     * @return \think\response\Json
     */
    public function getSubmitList(Data $M)
    {
        return json(
            $M->field('id,card,name,sbtype')
                ->where('order', 1)
                ->where('status', Data::SUBMIT)//已二审
                ->select()
        );
    }

    /**
     * 获取人才网时间
     * @param $id
     * @param Data $M
     * @return mixed
     */
    public function getRcDate($id, Data $M)
    {
        return $M->where('id', $id)->value('rcdate');
    }

    /**
     * 设置人才网返回时间
     * @param $id
     * @param $time
     * @return \think\response\Json
     */
    public function setRcDate($id, $time)
    {
        $data = Data::get($id);
        $data->rcdate = $time;  //设置约号时间
        $data->status = Data::APPOINTMENT_SUCCESS; // 设置已出号
        return $data->save() ? Res::Json(200) : Res::Json(400);
    }

    public function getSzhrRegData()
    {

    }

    //获取审批同意的
    public function getAuditSuccessList(Data $M)
    {
        $Map = [
            'mode' => '05',
            'status' => Data::SUBMIT
        ];
        return json(
            $M->field('id,name,card')
                ->where('status', Data::AUDIT_SUCCESS)
                ->whereOr($Map)
                ->select()
        );
    }

    //设置深圳人保局查询的结果
    public function setSzhrss($id, $code)
    {
        $M = Data::get($id);
        $M->status = $code;
        return $data->save() ? Res::Json(200) : Res::Json(400);
    }

    /**
     * 获取一行DATA数据
     * @param $id
     * @param Data $M
     * @return static
     */
    public function getOneData($id, Data $M)
    {
        return $M->get($id);
    }

    //上传资料
    public function uploadByImage()
    {
        $idcard = $this->request->param('idcard');
        $file = $this->request->file('file');
        //中文需要转化编码
        $fileName = iconv("UTF-8", "gb2312", $file->getInfo('name'));
        $info = $file->move(UPLOAD_PATH . $idcard, $fileName);
        if ($info) {
            // 输出 20160820/42a79759f284b767dfcb2a0197904287.jpg
            $ext = $info->getExtension();
            //$info->getInfo('name')
            //成功上传后 返回上传信息
            //{"jsonrpc" : "2.0", "result" : null, "id" : "id"}
            return json(array('result' => null, 'id' => 'id', 'ext' => $ext));
        } else {
            // 上传失败返回错误信息
            //{"jsonrpc" : "2.0", "error" : {"code": 102, "message": "Failed to open output stream."}, "id" : "id"}
            return json(array('result' => 0, 'error' => 'id'));
        }
    }

    //获取文件列表
    public function imageList($idcard)
    {
        return json(
            LibFile::getImageByNames(UPLOAD_PATH . $idcard
            ));
    }
}